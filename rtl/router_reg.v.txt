module router_reg(
    input clk, resetn, packet_valid,
    input [7:0] data_in,
    input fifo_full, detect_add, ld_state, laf_state, full_state, lfd_state, rst_int_reg,
    output reg parity_done, low_packet_valid, err,
    output reg [7:0] dout
);

    reg [7:0] hold_header_byte, fifo_full_state_byte, internal_parity, packet_parity_byte;

    // Parity Done Logic
    always @(posedge clk) begin
        if (!resetn)
            parity_done <= 1'b0;
        else if (ld_state && !fifo_full && !packet_valid)
            parity_done <= 1'b1;
        else if (laf_state && low_packet_valid && !parity_done)
            parity_done <= 1'b1;
        else if (detect_add)
            parity_done <= 1'b0;
    end

    // Low Packet Valid Logic
    always @(posedge clk) begin
        if (!resetn)
            low_packet_valid <= 1'b0;
        else if (rst_int_reg)
            low_packet_valid <= 1'b0;
        else if (ld_state && !packet_valid)
            low_packet_valid <= 1'b1;
    end

    // Data Output and Parity Byte Handling
    always @(posedge clk) begin
        if (!resetn) begin
            dout <= 8'b0;
            hold_header_byte <= 8'b0;
        end
        else begin
            if (detect_add && packet_valid)
                hold_header_byte <= data_in;
            else if (lfd_state)
                dout <= hold_header_byte;
            else if (ld_state && !fifo_full)
                dout <= data_in;
            else if (full_state)
                fifo_full_state_byte <= data_in;
            else if (laf_state)
                dout <= fifo_full_state_byte;
        end
    end

    // Parity Error Detection
    always @(posedge clk) begin
        if (!resetn) begin
            internal_parity <= 8'b0;
            packet_parity_byte <= 8'b0;
            err <= 1'b0;
        end else begin
            if (detect_add)
                internal_parity <= 8'b0;
            else if ((ld_state && !fifo_full) || laf_state)
                internal_parity <= internal_parity ^ data_in;
            else if (full_state)
                packet_parity_byte <= data_in;

            if (parity_done)
                err <= (internal_parity != packet_parity_byte);
        end
    end

endmodule
