module router_fifo (
    input clk,
    input resetn,
    input soft_reset,
    input write_enb,
    input read_enb,
    input lfd_state,
    input [7:0] data_in,
    output reg empty,
    output reg full,
    output reg [7:0] dataout
);

reg [3:0] read_ptr, write_ptr;
reg [4:0] incrementer;
reg [5:0] count;
reg [8:0] fifo [15:0];
reg temp;
integer i;

// Store lfd_state
always @(posedge clk) begin
    if (!resetn)
        temp <= 1'b0;
    else
        temp <= lfd_state;
end

// Incrementer logic for tracking FIFO depth
always @(posedge clk) begin
    if (!resetn)
        incrementer <= 0;
    else if ((write_enb && !full) && (read_enb && !empty))
        incrementer <= incrementer;
    else if (write_enb && !full)
        incrementer <= incrementer + 1;
    else if (read_enb && !empty)
        incrementer <= incrementer - 1;
end

// Empty and full flag generation
always @(*) begin
    if (incrementer == 0)
        empty = 1'b1;
    else
        empty = 1'b0;

    if (incrementer == 5'd15)
        full = 1'b1;
    else
        full = 1'b0;
end

// Write logic
always @(posedge clk) begin
    if (!resetn || soft_reset) begin
        for (i = 0; i < 16; i = i + 1)
            fifo[i] <= 9'd0;
        write_ptr <= 4'd0;
    end else if (write_enb && !full) begin
        fifo[write_ptr] <= {temp, data_in};
        write_ptr <= write_ptr + 1;
    end
end

// Read logic
always @(posedge clk) begin
    if (!resetn || soft_reset) begin
        read_ptr <= 4'd0;
        dataout <= 8'd0;
    end else if (read_enb && !empty) begin
        dataout <= fifo[read_ptr][7:0];
        read_ptr <= read_ptr + 1;
    end
end

endmodule
